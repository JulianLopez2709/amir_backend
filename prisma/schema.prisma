// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int           @id @default(autoincrement())
  name      String
  email     String        @unique
  username  String        @unique
  password  String
  phone   String
  createdAt DateTime      @default(now())
  companies UserCompany[]
}

model UserCompany {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  role      String  @default("asesor")
  avaliable Boolean @default(true)
}

model Company {
  id              Int           @id @default(autoincrement())
  name            String
  slogan          String
  logo            String
  type            String
  plan            String
  primary_color   String
  secondary_color String
  avaliable        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  users           UserCompany[]
  products        Product[]
  orders          Order[]
  accunts         Account[]
}

model Account {
  id        String      @id @default(uuid())
  type      String
  price     Float
  const     Boolean
  date      DateTime @default(now())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
}

model Product {
  id            String       @id @default(uuid())
  name          String
  barcode       String?
  description   String?
  imgUrl        String?
  price_cost    Float
  price_selling Float
  stock_minimo  Int?
  stock         Int?
  avaliable     Boolean @default(true)
  detail        Json?
  createAt      DateTime  @default(now())
  is_favorite   Boolean   @default(false)
  categoryId    Int?
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  companyId Int
  company   Company        @relation(fields: [companyId], references: [id])
  orders    ProductOrder[]
}

model ProductOrder {
  id     Int    @id @default(autoincrement())
  status String
  quantity Int
  notes  String

  productId String
  product   Product @relation(fields: [productId], references: [id])

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
}

model Order {
  id          Int            @id @default(autoincrement())
  status      String         @default("new")
  total_price Float
  createAt    DateTime       @default(now())
  companyId   Int
  company     Company        @relation(fields: [companyId], references: [id])
  products    ProductOrder[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}
